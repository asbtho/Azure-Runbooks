<#PSScriptInfo

.VERSION 1.0.0

.AUTHOR asbtho

.TAGS

.LICENSEURI

.PROJECTURI

.ICONURI

.EXTERNALMODULEDEPENDENCIES

.REQUIREDSCRIPTS

.EXTERNALSCRIPTDEPENDENCIES

.RELEASENOTES

.PRIVATEDATA

#>

<#

.DESCRIPTION
 Script to disable users who are expired in AD and sync password expiry with Azure AD.

.PARAMETER

#>

# Set Global parameters
[CmdletBinding()] 
Param 
( 
    # Specify the email address of the sender 
    [Parameter(Mandatory=$false,HelpMessage="Sender adress: ")] 
    [String]$FromEmailAddress = 'yourSenderEmail@youremail.com',

    # Specify the AD Search Base for which OU to search for users
    [Parameter(Mandatory=$false,HelpMessage="Search Base OU for users")] 
    [String]$ADSearchBase = "OU=YourSearchBaseOU"
)

# Get SMTP Server from Automation Account Variable 
[String] $SMTPServer = "smtp.office365.com"

$Cred = Get-AutomationPSCredential -Name "yourSMTPaccount"

# ADSearchParameters
$param=@{
UsersOnly = $True
AccountExpired = $True
SearchBase = $ADSearchBase 
}

# Which functions are enabled for script
$userExpiryEnabled = $true

[System.Management.Automation.ActionPreference] $ErrorActionPreference = [System.Management.Automation.ActionPreference]::Stop

# Main loop
try {
    if (-not (Test-Path -Path 'HKLM:\SOFTWARE\Microsoft\HybridRunbookWorker')) {
        throw 'This runbook must run on a Hybrid Worker.'
    }
    if ($userExpiryEnabled -eq $false) {
        throw 'No functions are enabled for this script.'
    }

    [pscredential] $Credential = Get-AutomationPSCredential -Name 'yourHybridWorkerAccount'

    # Get AD Users
    Write-Output "Get ADUsers..."
    $users = Search-ADAccount @param | 
    Get-ADuser -Properties Department,Title,AccountExpirationDate,SAMAccountName | where {$_.enabled -eq $true}

    $i = 0
    # Test Run
    ForEach($user in $users){
        $date = Get-Date
        if($user.enabled -eq $true -and $user.AccountExpirationDate -lt $date.ToShortDateString()){  
            Write-Output "TEST Disabling user: $($user.SAMAccountName)"
            $i++  
        }
    }

    # Verify Test Run or abort if more than 10 users to be disabled
    if ($i -lt 10){
        ForEach($user in $users){
            $date = Get-Date
            if($user.enabled -eq $true -and $user.AccountExpirationDate -lt $date.ToShortDateString()){  
                Write-Output "Disabling user: $($user.SAMAccountName)"
                Disable-ADAccount -Identity $user.SAMAccountName
            }
        }
        Write-Output "Modified $i users"
    } else {
        Write-Output "Warning: Script wants to disable $i users"

        # Send Alert Email
        Write-Output "Sending warning message to yourReceiverEmail@youremail.com"

        $Subject = "YourRunbookName wants to disable $i users. - WARNING MESSAGE"
        $Body = "<p>Please verify manually if this is correct.</p>
        <br /> 
        <p>This message was auto-generated by Azure Automation Account: yourAutomationAccount</p>
        <p>Runbook: YourRunbookName</p>"

        Send-Mailmessage -smtpServer $SMTPServer -from $FromEmailAddress -to "yourReceiverEmail@youremail.com" -subject $Subject -body $Body -bodyasHTML -UseSsl -Port 587 -priority High -Verbose -Credential $Cred -ErrorAction Stop -encoding utf8
    
        exit
    }

    Write-Output "Runbook completed."

} catch {
    Write-Error $PSItem.Exception.Message
    throw $PSItem.Exception.Message
}
