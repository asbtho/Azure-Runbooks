<#PSScriptInfo

.VERSION 1.0.0

.TAGS

.LICENSEURI

.PROJECTURI

.ICONURI

.EXTERNALMODULEDEPENDENCIES

.REQUIREDSCRIPTS

.EXTERNALSCRIPTDEPENDENCIES

.RELEASENOTES

.PRIVATEDATA

#>

<#

.DESCRIPTION
 Script to force password change for Azure AD users who have password expired in AD.

.PARAMETER

#>

# Set Global parameters
[CmdletBinding()] 
Param 
( 
    # Specify the email address of the sender 
    [Parameter(Mandatory=$false,HelpMessage="Sender adress: ")] 
    [String]$FromEmailAddress = 'yourSenderEmail@youremail.com',

    [Parameter(Mandatory=$false,HelpMessage="Search Base OU for users")] 
    [String]$ADSearchBase = "OU=YourSearchBaseOU"
)

# Get SMTP Server from Automation Account Variable 
[String] $SMTPServer = "smtp.office365.com"

$Cred = Get-AutomationPSCredential -Name "smtpaccount"


# ADSearchParameters
$param=@{
UsersOnly = $True
PasswordExpired = $True
SearchBase = $ADSearchBase 
}

# Which functions are enabled for script
$userPasswordExpiredSyncEnabled = $true

[System.Management.Automation.ActionPreference] $ErrorActionPreference = [System.Management.Automation.ActionPreference]::Stop

# Main
try {
    if (-not (Test-Path -Path 'HKLM:\SOFTWARE\Microsoft\HybridRunbookWorker')) {
        throw 'This runbook must run on a Hybrid Worker.'
    }
    if ($userPasswordExpiredSyncEnabled -eq $false) {
        throw 'No functions are enabled for this script.'
    }

    [pscredential] $Credential = Get-AutomationPSCredential -Name 'svc-AzHybWorker'

    # Get AD Users
    Write-Output "Get ADUsers..."
    $users = Get-ADUser -Filter {Enabled -eq $True} -SearchBase "$ADSearchBase" -Properties Department,Title,UserPrincipalName,AccountExpirationDate,SAMAccountName,passwordexpired | where {$_.passwordexpired -eq $true}


    # AzureAD connect with RunAsConnection
    $RunAsConnection = Get-AutomationConnection -Name "AzureRunAsConnection"


    # Connect-AzureAD
    Connect-AzureAD -Tenant $RunAsConnection.TenantId -ApplicationId $RunAsConnection.ApplicationId -CertificateThumbprint $RunAsConnection.CertificateThumbprint


    $i = 0
    # Test Run
    ForEach($user in $users){
        $date = Get-Date
        if($user.enabled -eq $true -and $user.passwordexpired -eq $true -and $user.UserPrincipalName){  
            if($user.UserPrincipalName -notlike "*@incorrectUPN.com"){
                $azureaduser = Get-AzureADUser -ObjectId $user.UserPrincipalName
                if($azureaduser.PasswordProfile.ForceChangePasswordNextLogin -eq $true){
                    Write-Output "TEST can see that Force Change password is already set for $($user.UserPrincipalName)"
                } else {
                    Write-Output "TEST fetched user that needs Force Change password set in Azure AD: $($user.SAMAccountName) - $($user.UserPrincipalName)"
                    $i++
                }
            } else {
                Write-Output "TEST fetched @incorrectUPN.com user that have password expiry status True: $($user.SAMAccountName) - $($user.UserPrincipalName)"
            }
        }
    }


    # Verify Test Run or abort if more than 20 users to get Force Change Password 
    if ($i -lt 20){
        ForEach($user in $users){
            $date = Get-Date
            if($user.enabled -eq $true -and $user.passwordexpired -eq $true -and $user.UserPrincipalName){
                if($user.UserPrincipalName -notlike "*@incorrectUPN.com"){
                    $azureaduser = Get-AzureADUser -ObjectId $user.UserPrincipalName
                    if($azureaduser.PasswordProfile.ForceChangePasswordNextLogin -eq $true){
                        Write-Output "Force Change password is already set for $($user.UserPrincipalName)"
                    } else {
                        Write-Output "Fixing password sync for user: $($user.UserPrincipalName)"
                        $newProfile = New-Object -TypeName Microsoft.Open.azureAD.Model.PasswordProfile
                        $newProfile.ForceChangePasswordNextLogin = $True
                        Set-AzureADUser -ObjectId $user.UserPrincipalName -PasswordProfile $newProfile
                    }
                } else {
                    Write-Output "$($user.UserPrincipalName) does not exist in Azure AD"
                }
            }  
        }
        Write-Output "Modified $i users"
    } else {
        Write-Output "Warning: Script wants to manage $i users or more"

        # Send Alert Email
        Write-Output "Sending warning message to yourReceiverEmail@youremail.com"

        $Subject = "YourRunbookName wants to ForceChangePasswordNextLogin for $i users. - WARNING MESSAGE"
        $Body = "<p>Please verify manually if this is correct.</p>
        <br /> 
        <p>This message was auto-generated by Azure Automation Account: yourAutomationAccount</p>
        <p>Runbook: YourRunbookName</p>"

        Send-Mailmessage -smtpServer $SMTPServer -from $FromEmailAddress -to "yourReceiverEmail@youremail.com" -subject $Subject -body $Body -bodyasHTML -UseSsl -Port 587 -priority High -Verbose -Credential $Cred -ErrorAction Stop -encoding utf8
    
        exit
    }

    Write-Output "Runbook completed."

} catch {
    Write-Error $PSItem.Exception.Message
    throw $PSItem.Exception.Message
}
